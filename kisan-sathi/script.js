// Smooth scrolling for navigation links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// FIXED: Scheme Details Function - WITH CLICKABLE LINKS
function showSchemeDetails(scheme) {
    console.log('Button clicked for:', scheme);

    const schemeDetails = {
        'pmkisan': {
            title: 'рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдХрд┐рд╕рд╛рди рд╕рдореНрдорд╛рди рдирд┐рдзрд┐',
            details: 'тВ╣6,000 рдкреНрд░рддрд┐ рд╡рд░реНрд╖ рддреАрди рдХрд┐рд╕реНрддреЛрдВ рдореЗрдВ\nрд╕реАрдзреЗ рдмреИрдВрдХ рдЦрд╛рддреЗ рдореЗрдВ\nрдЬрдореАрди рдХреЗ рд░рд┐рдХреЙрд░реНрдб рдХреЗ рдЖрдзрд╛рд░ рдкрд░\nрдЖрд╡реЗрджрди: pmkisan.gov.in\nрд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 155261',
            link: 'https://pmkisan.gov.in'
        },
        'cropinsurance': {
            title: 'рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдлрд╕рд▓ рдмреАрдорд╛ рдпреЛрдЬрдирд╛',
            details: 'рдкреНрд░реАрдорд┐рдпрдо: 2% (рдЦрд░реАрдл), 1.5% (рд░рдмреА)\nрдмрд╛рдврд╝, рд╕реВрдЦрд╛, рдмреАрдорд╛рд░реА рд╕реЗ рд╕реБрд░рдХреНрд╖рд╛\nрдСрдирд▓рд╛рдЗрди рдЖрд╡реЗрджрди рд╕рдВрднрд╡\nрдЖрд╡реЗрджрди: pmfby.gov.in\nрд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 1800-180-1551',
            link: 'https://pmfby.gov.in'
        },
        'kcc': {
            title: 'рдХрд┐рд╕рд╛рди рдХреНрд░реЗрдбрд┐рдЯ рдХрд╛рд░реНрдб',
            details: '4% рдмреНрдпрд╛рдЬ рджрд░ рдкрд░ рдЛрдг\nтВ╣1.6 рд▓рд╛рдЦ рддрдХ рдХреА рд╕реАрдорд╛\nрдХреЛрдИ рд╕рдВрдкрд╛рд░реНрд╢реНрд╡рд┐рдХ рдЖрд╡рд╢реНрдпрдХ рдирд╣реАрдВ\nрдЖрд╡реЗрджрди: рдЕрдкрдиреЗ рдмреИрдВрдХ рд╢рд╛рдЦрд╛ рдореЗрдВ\nрддреБрд░рдВрдд рдЛрдг рдордВрдЬреВрд░реА',
            link: 'https://kcc.gov.in'
        },
        'soilhealth': {
            title: 'рдореГрджрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХрд╛рд░реНрдб рдпреЛрдЬрдирд╛',
            details: 'рдорд┐рдЯреНрдЯреА рдХреА рдирд┐рдГрд╢реБрд▓реНрдХ рдЬрд╛рдВрдЪ\nрдЙрд░реНрд╡рд░рдХ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ\nрд╣рд░ 3 рд╡рд░реНрд╖ рдореЗрдВ рдХрд╛рд░реНрдб\nрдСрдирд▓рд╛рдЗрди рдЯреНрд░реИрдХрд┐рдВрдЧ\nрдЖрд╡реЗрджрди: soilhealth.dac.gov.in',
            link: 'https://soilhealth.dac.gov.in'
        },
        'irrigation': {
            title: 'рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдХреГрд╖рд┐ рд╕рд┐рдВрдЪрд╛рдИ рдпреЛрдЬрдирд╛',
            details: 'рдбреНрд░рд┐рдк/рд╕реНрдкреНрд░рд┐рдВрдХрд▓рд░ рд╕рдмреНрд╕рд┐рдбреА\nрдЬрд▓ рд╕рдВрд░рдХреНрд╖рдг рдкрд░рд┐рдпреЛрдЬрдирд╛рдПрдВ\n55% рд╕рдмреНрд╕рд┐рдбреА рдЫреЛрдЯреЗ рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ\nрдСрдирд▓рд╛рдЗрди рдЖрд╡реЗрджрди\nрд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 14444',
            link: 'https://pmksy.gov.in'
        },
        'horticulture': {
            title: 'рд░рд╛рд╖реНрдЯреНрд░реАрдп рдмрд╛рдЧрд╡рд╛рдиреА рдорд┐рд╢рди',
            details: '50% рд╕рдмреНрд╕рд┐рдбреА рдкреМрдз рд╕рд╛рдордЧреНрд░реА рдкрд░\nрдЧреНрд░реАрдирд╣рд╛рдЙрд╕ рдирд┐рд░реНрдорд╛рдг рд╕рд╣рд╛рдпрддрд╛\nрдкреНрд░рд╕рдВрд╕реНрдХрд░рдг рдЗрдХрд╛рдИ рд╕рд╣рд╛рдпрддрд╛\nрд╡рд┐рдкрдгрди рдмреБрдирд┐рдпрд╛рджреА рдврд╛рдВрдЪрд╛',
            link: 'https://nhb.gov.in'
        }
    };

    if (schemeDetails[scheme]) {
        const details = schemeDetails[scheme];
        const userChoice = confirm(
            `${details.title}\n\n${details.details}\n\nрдХреНрдпрд╛ рдЖрдк рдЖрдзрд┐рдХрд╛рд░рд┐рдХ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдкрд░ рдЬрд╛рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?`
        );

        if (userChoice) {
            window.open(details.link, '_blank');
        }
    } else {
        alert('рдпреЛрдЬрдирд╛ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЬрд▓реНрдж рд╣реА рдЙрдкрд▓рдмреНрдз рд╣реЛрдЧреАред');
    }
}

// ==================== REAL WEATHER SYSTEM ====================
async function fetchRealWeather() {
    try {
        const cities = [
            { name: 'рджрд┐рд▓реНрд▓реА', lat: 28.6139, lon: 77.2090 },
            { name: 'рд▓рдЦрдирдК', lat: 26.8467, lon: 80.9462 },
            { name: 'рдХрд╛рдирдкреБрд░', lat: 26.4499, lon: 80.3319 },
            { name: 'рд╡рд╛рд░рд╛рдгрд╕реА', lat: 25.3176, lon: 82.9739 }
        ];

        const randomCity = cities[Math.floor(Math.random() * cities.length)];

        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${randomCity.lat}&lon=${randomCity.lon}&units=metric&appid=b6907d289e10d714a6e88b30761fae22`);

        if (!response.ok) throw new Error('Weather API not available');

        const data = await response.json();
        updateRealWeather(data, randomCity.name);

    } catch (error) {
        console.log('Real weather API failed, using simulation');
        updateWeatherSimulation();
    }
}

function updateRealWeather(weatherData, cityName) {
    const tempElement = document.querySelector('.temp');
    const conditionElement = document.querySelector('.condition');
    const adviceElement = document.querySelector('.advice');

    const temperature = Math.round(weatherData.main.temp);
    const condition = weatherData.weather[0].description;
    const humidity = weatherData.main.humidity;
    const windSpeed = weatherData.wind.speed;

    const hindiConditions = {
        'clear sky': 'тШАя╕П рд╕рд╛рдл рдЖрд╕рдорд╛рди',
        'few clouds': 'ЁЯМдя╕П рдХреБрдЫ рдмрд╛рджрд▓',
        'scattered clouds': 'тЫЕ рдмрд┐рдЦрд░реЗ рдмрд╛рджрд▓',
        'broken clouds': 'тШБя╕П рдЯреВрдЯреЗ рдмрд╛рджрд▓',
        'overcast clouds': 'тШБя╕П рдШрдиреЗ рдмрд╛рджрд▓',
        'light rain': 'ЁЯМзя╕П рд╣рд▓реНрдХреА рдмрд╛рд░рд┐рд╢',
        'moderate rain': 'ЁЯМзя╕П рдордзреНрдпрдо рдмрд╛рд░рд┐рд╢',
        'heavy rain': 'тЫИя╕П рддреЗрдЬ рдмрд╛рд░рд┐рд╢',
        'thunderstorm': 'тЫИя╕П рдЖрдВрдзреА-рддреВрдлрд╛рди',
        'mist': 'ЁЯМля╕П рдзреБрдВрдз',
        'fog': 'ЁЯМля╕П рдХреЛрд╣рд░рд╛'
    };

    const hindiCondition = hindiConditions[condition] || `ЁЯМдя╕П ${condition}`;

    tempElement.textContent = `${temperature}┬░C`;
    conditionElement.textContent = `${hindiCondition} (${cityName})`;

    let advice = '';
    if (condition.includes('rain')) {
        advice = 'рдЖрдЬ рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рд╣реИ, рдЦреЗрдд рдореЗрдВ рдХрд╛рдо рди рдХрд░реЗрдВред рдмреАрдЬ рдмреЛрдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫрд╛ рджрд┐рди рд╣реИред';
    } else if (temperature > 35) {
        advice = 'рдЖрдЬ рддрд╛рдкрдорд╛рди рдЕрдзрд┐рдХ рд╣реИ, рджреЛрдкрд╣рд░ рдореЗрдВ рдЦреЗрдд рдореЗрдВ рдХрд╛рдо рди рдХрд░реЗрдВред рд╕рд┐рдВрдЪрд╛рдИ рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫрд╛ рд╕рдордп рд╣реИред';
    } else if (temperature < 15) {
        advice = 'рдЖрдЬ рддрд╛рдкрдорд╛рди рдХрдо рд╣реИ, рд╕реБрдмрд╣ рджреЗрд░ рд╕реЗ рдЦреЗрдд рдореЗрдВ рдХрд╛рдо рд╢реБрд░реВ рдХрд░реЗрдВред рдлрд╕рд▓реЛрдВ рдХреЛ рдардВрдб рд╕реЗ рдмрдЪрд╛рдПрдВред';
    } else if (humidity > 80) {
        advice = 'рдЖрдЬ рдирдореА рдЕрдзрд┐рдХ рд╣реИ, рдлрд╕рд▓реЛрдВ рдореЗрдВ рдлрдлреВрдВрдж рд░реЛрдЧреЛрдВ рдкрд░ рдирдЬрд░ рд░рдЦреЗрдВред';
    } else {
        advice = 'рдЖрдЬ рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рдмрдврд╝рд┐рдпрд╛ рдореМрд╕рдо рд╣реИред рд╕рднреА рдХреГрд╖рд┐ рдХрд╛рд░реНрдп рдЬрд╛рд░реА рд░рдЦ рд╕рдХрддреЗ рд╣реИрдВред';
    }

    adviceElement.textContent = advice;
    updateRealForecast(temperature);
}

function updateRealForecast(currentTemp) {
    const forecastDays = document.querySelectorAll('.forecast-days .day');

    forecastDays.forEach((day, index) => {
        const dayElements = day.querySelectorAll('p');
        const dayName = ['рдХрд▓', 'рдкрд░рд╕реЛрдВ', 'рддрд░рд╕реЛрдВ'][index];

        const tempVariation = (Math.random() * 6 - 3);
        const forecastTemp = Math.round(currentTemp + tempVariation);

        const conditions = ['тШАя╕П', 'тЫЕ', 'тШБя╕П', 'ЁЯМзя╕П'];
        const randomCondition = conditions[Math.floor(Math.random() * conditions.length)];

        dayElements[0].textContent = dayName;
        dayElements[1].textContent = `${forecastTemp}┬░C`;
        dayElements[2].textContent = randomCondition;
    });
}

function updateWeatherSimulation() {
    const tempElement = document.querySelector('.temp');
    const conditionElement = document.querySelector('.condition');
    const adviceElement = document.querySelector('.advice');

    const temperatures = [28, 30, 32, 34, 36];
    const conditions = ['ЁЯМзя╕П рдмрд╛рд░рд┐рд╢', 'тЫЕ рдмрд╛рджрд▓', 'тШАя╕П рдзреВрдк', 'ЁЯМдя╕П рд╣рд▓реНрдХреА рдзреВрдк'];

    const randomTemp = temperatures[Math.floor(Math.random() * temperatures.length)];
    const randomCondition = conditions[Math.floor(Math.random() * conditions.length)];

    tempElement.textContent = `${randomTemp}┬░C`;
    conditionElement.textContent = randomCondition;

    if (randomCondition.includes('рдмрд╛рд░рд┐рд╢')) {
        adviceElement.textContent = 'рдЖрдЬ рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рд╣реИ, рдЦреЗрдд рдореЗрдВ рдХрд╛рдо рди рдХрд░реЗрдВ';
    } else if (randomCondition.includes('рдзреВрдк')) {
        adviceElement.textContent = 'рдЖрдЬ рдЦреЗрдд рдХреА рд╕рд┐рдВрдЪрд╛рдИ рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫрд╛ рджрд┐рди рд╣реИ';
    } else {
        adviceElement.textContent = 'рд╕рд╛рдорд╛рдиреНрдп рджрд┐рди, рд╕рднреА рдХреГрд╖рд┐ рдХрд╛рд░реНрдп рдЬрд╛рд░реА рд░рдЦ рд╕рдХрддреЗ рд╣реИрдВ';
    }
}

// ==================== REAL GOVERNMENT PRICE SYSTEM ====================
async function fetchRealGovernmentPrices() {
    try {
        showNotification('рд╕рд░рдХрд╛рд░реА рдордВрдбреА рднрд╛рд╡ рд▓реЛрдб рд╣реЛ рд░рд╣реЗ рд╣реИрдВ...');

        const response = await fetch('https://api.data.gov.in/resource/9ef84268-d588-465a-a308-a864a43d0070?api-key=579b464db66ec23bdd000001cdd3946e44ce4aad7209ff7b23ac571b&format=json&limit=100');

        if (!response.ok) throw new Error('Government API not available');

        const data = await response.json();
        updateWithRealGovernmentData(data);

    } catch (error) {
        console.log('Government API failed, using backup data');
        useBackupRealisticData();
    }
}

function updateWithRealGovernmentData(apiData) {
    if (!apiData || !apiData.records) {
        useBackupRealisticData();
        return;
    }

    const govtPrices = {};
    apiData.records.forEach(record => {
        if (record.commodity && record.modal_price) {
            const cropName = record.commodity.trim();
            govtPrices[cropName] = {
                price: record.modal_price,
                market: record.district || record.market || 'рднрд╛рд░рдд'
            };
        }
    });

    const priceCards = document.querySelectorAll('.price-card');
    let updatedCount = 0;

    priceCards.forEach(card => {
        const cropName = card.querySelector('h3').textContent.trim();
        const priceElement = card.querySelector('.price');
        const marketElement = card.querySelector('.market');
        const changeElement = card.querySelector('.price-change');

        let realData = null;

        if (govtPrices[cropName]) {
            realData = govtPrices[cropName];
        } else {
            for (const [govtCrop, data] of Object.entries(govtPrices)) {
                if (govtCrop.includes(cropName) || cropName.includes(govtCrop)) {
                    realData = data;
                    break;
                }
            }
        }

        if (realData) {
            const realPrice = Math.round(realData.price);
            priceElement.textContent = `тВ╣${realPrice.toLocaleString()}/рдХреНрд╡рд┐рдВрдЯрд▓`;

            if (realData.market) {
                marketElement.textContent = `${realData.market} рдордВрдбреА`;
            }

            const basePrice = getBasePrice(cropName);
            const changePercent = basePrice ? ((realPrice - basePrice) / basePrice * 100).toFixed(1) : '0.0';

            changeElement.textContent = `${parseFloat(changePercent) > 0 ? '+' : ''}${changePercent}%`;
            changeElement.className = `price-change ${parseFloat(changePercent) >= 0 ? 'up' : 'down'}`;

            if (!changeElement.querySelector('.real-badge')) {
                const badge = document.createElement('span');
                badge.className = 'real-badge';
                badge.textContent = ' ЁЯУК';
                badge.title = 'рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕рд░рдХрд╛рд░реА рдбреЗрдЯрд╛';
                changeElement.appendChild(badge);
            }

            updatedCount++;
        } else {
            useBackupForCard(card);
        }
    });

    if (updatedCount > 0) {
        showNotification(`${updatedCount} рдлрд╕рд▓реЛрдВ рдХреЗ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕рд░рдХрд╛рд░реА рднрд╛рд╡ рдЕрдкрдбреЗрдЯ рд╣реЛ рдЧрдП!`);
    }
}

function getBasePrice(cropName) {
    const basePrices = {
        'рдЧреЗрд╣реВрдВ': 2150,
        'рдзрд╛рди': 1890,
        'рдордХреНрдХрд╛': 1750,
        'рдЬреМ': 1650,
        'рдмрд╛рдЬрд░рд╛': 1800,
        'рдЬреНрд╡рд╛рд░': 1720,
        'рдЪрдирд╛': 4200,
        'рдЕрд░рд╣рд░': 5600,
        'рдореВрдВрдЧ': 6100,
        'рдЙрдбрд╝рдж': 5800,
        'рд╕реЛрдпрд╛рдмреАрди': 3200,
        'рдореВрдВрдЧрдлрд▓реА': 5500,
        'рд╕рд░рд╕реЛрдВ': 4800,
        'рддрд┐рд▓': 6500,
        'рдЖрд▓реВ': 800,
        'рдкреНрдпрд╛рдЬ': 1200,
        'рдЯрдорд╛рдЯрд░': 900,
        'рдмреИрдВрдЧрди': 700
    };
    return basePrices[cropName] || null;
}

function useBackupRealisticData() {
    const marketData = {
        'рдЧреЗрд╣реВрдВ': { price: 2150, trend: 'up' },
        'рдзрд╛рди': { price: 1890, trend: 'stable' },
        'рдордХреНрдХрд╛': { price: 1750, trend: 'up' },
        'рд╕реЛрдпрд╛рдмреАрди': { price: 3200, trend: 'up' },
        'рдЪрдирд╛': { price: 4200, trend: 'down' },
        'рдЕрд░рд╣рд░': { price: 5600, trend: 'stable' },
        'рдореВрдВрдЧ': { price: 6100, trend: 'up' },
        'рдореВрдВрдЧрдлрд▓реА': { price: 5500, trend: 'down' },
        'рд╕рд░рд╕реЛрдВ': { price: 4800, trend: 'up' },
        'рдЖрд▓реВ': { price: 800, trend: 'down' },
        'рдкреНрдпрд╛рдЬ': { price: 1200, trend: 'up' },
        'рдЯрдорд╛рдЯрд░': { price: 900, trend: 'down' }
    };

    const priceCards = document.querySelectorAll('.price-card');
    priceCards.forEach(card => {
        useBackupForCard(card, marketData);
    });

    showNotification('рдЕрдиреБрдорд╛рдирд┐рдд рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рджрд┐рдЦрд╛рдП рдЬрд╛ рд░рд╣реЗ рд╣реИрдВ');
}

function useBackupForCard(card, marketData = null) {
    const cropName = card.querySelector('h3').textContent.trim();
    const priceElement = card.querySelector('.price');
    const changeElement = card.querySelector('.price-change');

    let currentPrice = parseInt(priceElement.textContent.replace(/[тВ╣,/]/g, ''));

    if (marketData && marketData[cropName]) {
        const cropData = marketData[cropName];
        const variation = cropData.trend === 'up' ? (Math.random() * 5) :
            cropData.trend === 'down' ? (-Math.random() * 5) :
            (Math.random() * 3 - 1.5);

        const newPrice = Math.max(100, cropData.price + (cropData.price * variation / 100));
        const changePercent = ((newPrice - cropData.price) / cropData.price * 100).toFixed(1);

        priceElement.textContent = `тВ╣${Math.round(newPrice).toLocaleString()}/рдХреНрд╡рд┐рдВрдЯрд▓`;
        changeElement.textContent = `${parseFloat(changePercent) > 0 ? '+' : ''}${changePercent}%`;
        changeElement.className = `price-change ${parseFloat(changePercent) >= 0 ? 'up' : 'down'}`;
    } else {
        const changePercent = (Math.random() * 6 - 3).toFixed(1);
        const changeAmount = Math.round(currentPrice * changePercent / 100);
        const newPrice = Math.max(100, currentPrice + changeAmount);

        priceElement.textContent = `тВ╣${newPrice.toLocaleString()}/рдХреНрд╡рд┐рдВрдЯрд▓`;
        changeElement.textContent = `${parseFloat(changePercent) > 0 ? '+' : ''}${changePercent}%`;
        changeElement.className = `price-change ${parseFloat(changePercent) >= 0 ? 'up' : 'down'}`;
    }
}

// ==================== NOTIFICATION SYSTEM ====================
function showNotification(message) {
    const existingToast = document.querySelector('.notification-toast');
    if (existingToast) {
        existingToast.remove();
    }

    const toast = document.createElement('div');
    toast.className = 'notification-toast';
    toast.style.cssText = `
        position: fixed;
        top: 80px;
        right: 20px;
        background: #4caf50;
        color: white;
        padding: 12px 24px;
        border-radius: 8px;
        z-index: 10000;
        font-weight: bold;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    `;
    toast.textContent = message;
    document.body.appendChild(toast);

    setTimeout(() => toast.remove(), 3000);
}

// ==================== INITIALIZE EVERYTHING ====================
window.addEventListener('load', function() {
    // Load REAL weather first
    fetchRealWeather();

    // Load REAL government prices
    fetchRealGovernmentPrices();

    // Auto-update weather every 30 minutes
    setInterval(fetchRealWeather, 1800000);

    // Auto-update prices every 10 minutes
    setInterval(fetchRealGovernmentPrices, 600000);

    showNotification('рдХрд┐рд╕рд╛рди рд╕рд╛рдереА рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдбреЗрдЯрд╛ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...');
});

// Add CSS for real data badge
const style = document.createElement('style');
style.textContent = `
    .real-badge {
        font-size: 0.8em;
        margin-left: 5px;
    }
    
    .notification-toast {
        animation: slideIn 0.3s ease-out;
    }
    
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
`;
document.head.appendChild(style);